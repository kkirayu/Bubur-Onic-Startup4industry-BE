<?php

namespace App\Services\Pegawai;

use _PHPStan_c6b09fbdf\Nette\Schema\ValidationException;
use App\Models\KasbonBulanan;
use App\Models\ProfilPegawai;
use App\Models\VerifikasiKasbonBulanan;
use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Http\Request;
use Illuminate\Pagination\LengthAwarePaginator;
use Illuminate\Support\Facades\Auth;
use Laravolt\Crud\Contracts\StoreRequestContract;
use Laravolt\Crud\Contracts\UpdateRequestContract;
use Laravolt\Crud\CrudModel;
use Laravolt\Crud\CrudService;
use Laravolt\Crud\Sys\ActivityLog\AkActivityLog;
use Laravolt\Crud\Traits\CanHandleMedia;

class KasbonBulananService extends CrudService
{
    use CanHandleMedia;

    public function beforeCreateHook(FormRequest|StoreRequestContract $requestContract)
    {
        $alreadyExsist = KasbonBulanan::where("bulan", $requestContract->bulan)
            ->where("tahun", $requestContract->tahun)
            ->where("perusahaan_id", $requestContract->perusahaan_id)
            ->where("cabang_id", $requestContract->cabang_id)->first();
        if ($alreadyExsist) {
            throw \Illuminate\Validation\ValidationException::withMessages(['bulan' => 'Sudah Membuat Kasbon periode tersebut']);
        }
        $requestContract->merge(['status' => "NEW"]);
        return parent::beforeCreateHook($requestContract); // TODO: Change the autogenerated stub
    }

    public function update(mixed $id, FormRequest|UpdateRequestContract $request): CrudModel
    {
        $request = $this->beforeUpdateHook($id, $request);
        $model = $this->model
            ->newQuery()
            ->findOrFail($id);

        //        $this->processNexcloudable($request, $model, 'UPDATE');
        $this->processMediaable($request, $model, 'UPDATE');

        $except = array_merge($this->model->getMediableColumns(), $this->model->getNexcloudableColumns());

        $validated = $request->all();
        unset($validated['status']);
        $model->update(collect($validated)->except($except)->toArray());
        $model->load($this->autoLoadRelations);

        AkActivityLog::createCrudlog(
            $model,
            "UPDATE_DATA"
        );
        return $this->afterUpdateHook($id, $model);
    }

    public function delete(mixed $model): ?bool
    {
        if ($model->status != "NEW") {
            throw \Illuminate\Validation\ValidationException::withMessages(['status' => 'Data Dengan Status ' . $model->status . ' Tidak bisa di hapus']);
        }
        return parent::delete($model);
    }

    public function ambilKasbon(Request $request): CrudModel
    {
        $kasbon = KasbonBulanan::findOrFail($request->kasbon_id);

        $user = Auth::user();
        $profilePegawai = ProfilPegawai::where("user_id", $user->id)
            ->with(["team"])
            ->first();

        $verifikasiKasbon = VerifikasiKasbonBulanan::where("profile_pegawai_id", $profilePegawai->id)
            ->where("kasbon_bulanan_id", $kasbon->id)
            ->first();


        if ($verifikasiKasbon && $verifikasiKasbon->status == "DIAJUKAN") {

            throw \Illuminate\Validation\ValidationException::withMessages(['kasbon_bulanan_id' => 'Anda Sudah mengambil kasbon']);
        } else if ($verifikasiKasbon && $verifikasiKasbon->status == "DIBATALKAN") {

            $verifikasiKasbon->update([
                'status' => 'DIAJUKAN'
            ]);
            $verifikasiKasbon->refresh();
        } else {

            $verifikasiKasbon = VerifikasiKasbonBulanan::create([
                "profile_pegawai_id" => $profilePegawai->id,
                "kasbon_bulanan_id" => $kasbon->id,
                "status" => "DIAJUKAN",
                "perusahaan_id" => $request->perusahaan_id,
                "cabang_id" => $request->cabang_id,
                "total_kasbon" => $profilePegawai->team->quota_kasbon_bulanan,
            ]);
        }


        return $verifikasiKasbon;

    }

    public function batalKasbon(Request $request): CrudModel
    {
        $kasbon = KasbonBulanan::findOrFail($request->kasbon_id);

        $user = Auth::user();
        $profilePegawai = ProfilPegawai::where("user_id", $user->id)
            ->with(["team"])
            ->first();

        $verifikasiKasbon = VerifikasiKasbonBulanan::where(
            "profile_pegawai_id", $profilePegawai->id
        )->where(
            "kasbon_bulanan_id", $kasbon->id)->first();
        if ($verifikasiKasbon && $verifikasiKasbon->status == "DIBATALKAN") {

            throw \Illuminate\Validation\ValidationException::withMessages(['kasbon_bulanan_id' => 'Anda Sudah membatalkan kasbon']);
        }
        $verifikasiKasbon->update([
            'status' => 'DIBATALKAN'
        ]);

        return $verifikasiKasbon;

    }

}
